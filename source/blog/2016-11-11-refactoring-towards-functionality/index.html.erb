---
title: Refactoring towards Functionality
description: A stepwise examination of how to incrementally make a method increasingly functional, increasing clarity and reducing length
author: Tom Johnson
date: 2016-11-11
published: true
styles: [highlight.css, syntax.css]
tags: java, refactoring
---

<p>Yesterday, I refactored a method.</p>

<p>Nothing unusual about that - we refactor code constantly. Code is, after all, better described as something grown than something built, and a large part of gardening is keeping the weeds in check. Normally, I wouldn’t have given it a second thought.</p>

<p>What was unusual, though, was I was pairing with someone I hadn’t paired with before, and she was relatively new to Java 8 constructs like Optionals. Pairing with someone new is always good for reflection.</p>

<p>As we went through the refactorings, I realised I was being motivated by a few simple pressures towards a functional approach. Each by themselves only made a small, incremental improvement, but composed together, they had a huge effect on the code.</p>

<p>Here’s the original code:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="n">responseWithDeal1</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">dealIdFromResponse</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">responseWithDeal1</span> <span class="o">=</span> <span class="n">dealIdFromResponse</span>
            <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">deal</span> <span class="o">=</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">);</span>
                <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="n">responseWithDeal</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">deal</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">responseWithDeal</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">deal</span><span class="o">));</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">responseWithDeal</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="n">responseWithDeal</span><span class="o">;</span>
            <span class="o">});</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">responseWithDeal1</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()));</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">responseWithDeal1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre>
</div>

<p>This is taken from the auction logic in our ad exchange. When someone visits a page with an ad element, the browser sends us a request, which we then send off to various bidders: the winning bid determines the ad to display. Some of those bidders have arranged deals, which affects how we process their bids.</p>

<p>The above method looks up the deal that applies to each bid, if there is one, and puts them into a composite object for further processing.</p>

<p>My first impression: well, I can trace through that and understand what’s going on, but it’s a little hairy. Let’s see if we can smooth it out a bit.</p>

<h3 id="principle-1-favour-early-return-over-single-return">PRINCIPLE 1: Favour early-return over single-return.</h3>

<p>The first thing I noticed was this:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="pink"><span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="n">responseWithDeal1</span><span class="o">;</span></span>
    <span class="k">if</span> <span class="o">(</span><span class="n">dealIdFromResponse</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
        <span class="pink"><span class="n">responseWithDeal1</span> <span class="o">=</span></span> <span class="n">dealIdFromResponse</span>
            <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">deal</span> <span class="o">=</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">);</span>
                <span class="blue"><span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="n">responseWithDeal</span><span class="o">;</span></span>
                <span class="k">if</span> <span class="o">(</span><span class="n">deal</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
                    <span class="blue"><span class="n">responseWithDeal</span> <span class="o">=</span></span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">deal</span><span class="o">));</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="blue"><span class="n">responseWithDeal</span> <span class="o">=</span></span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="blue"><span class="k">return</span> <span class="n">responseWithDeal</span><span class="o">;</span></span>
            <span class="o">});</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="pink"><span class="n">responseWithDeal1</span> <span class="o">=</span></span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()));</span>
    <span class="o">}</span>
    <span class="pink"><span class="k">return</span> <span class="n">responseWithDeal1</span><span class="o">;</span></span>
<span class="o">}</span>
</code></pre>
</div>
<p>Here we have two examples of the single-return style, one in the method itself and one in a lambda contained within the method. Arguments exist as to which of single-return and early-return style is more readable – personally, I find that tracking changes through mutable variables like this is harder to reason about than just returning values when you have them. Returning rather than assigning gives us:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="unused"><span class="n">responseWithDeal1</span></span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">dealIdFromResponse</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">dealIdFromResponse</span>
            <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">deal</span> <span class="o">=</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">);</span>
                <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="unused"><span class="n">responseWithDeal</span></span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">deal</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">deal</span><span class="o">));</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="error"><span class="n">responseWithDeal</span></span><span class="o">;</span>
            <span class="o">});</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()));</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="error"><span class="n">responseWithDeal1</span></span><span class="o">;</span>
<span class="o">}</span>
</code></pre>
</div>
<p>That’s reassuring, we have compile errors on the original return statements as they’re unreachable, and the variables are unused. It’s always nice when your IDE confirms that you’ve hit all the cases. Get rid of those lines and we get:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">dealIdFromResponse</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">dealIdFromResponse</span>
            <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">deal</span> <span class="o">=</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">deal</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">deal</span><span class="o">));</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">});</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre>
</div>
<h3 id="principle-2-favour-if-expressions-over-if-statements">PRINCIPLE 2: Favour if-expressions over if-statements</h3>

<p>The next thing I noticed was this:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="pink"><span class="k">if</span></span> <span class="o">(</span><span class="n">dealIdFromResponse</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
        <span class="pink"><span class="k">return</span></span> <span class="n">dealIdFromResponse</span>
            <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">deal</span> <span class="o">=</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">);</span>
                <span class="blue"><span class="k">if</span></span> <span class="o">(</span><span class="n">deal</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
                    <span class="blue"><span class="k">return</span></span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">deal</span><span class="o">));</span>
                <span class="o">}</span> <span class="blue"><span class="k">else</span></span> <span class="o">{</span>
                    <span class="blue"><span class="k">return</span></span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">});</span>
    <span class="o">}</span> <span class="pink"><span class="k">else</span></span> <span class="o">{</span>
        <span class="pink"><span class="k">return</span></span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre>
</div>
<p>We have two <code class="highlighter-rouge">if</code> statements here, with both <code class="highlighter-rouge">if</code> and <code class="highlighter-rouge">else</code> clauses, each of which returns immediately. These can be replaced with <code class="highlighter-rouge">if</code>-expressions:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="k">return</span> <span class="o">(</span><span class="n">dealIdFromResponse</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span>
        <span class="o">?</span> <span class="n">dealIdFromResponse</span>
            <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">deal</span> <span class="o">=</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">);</span>
                <span class="k">return</span> <span class="n">deal</span><span class="o">.</span><span class="na">isPresent</span><span class="o">()</span>
                    <span class="o">?</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">deal</span><span class="o">))</span>
                    <span class="o">:</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
            <span class="o">})</span>
        <span class="o">:</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()));</span>
<span class="o">}</span>
</code></pre>
</div>
<p>Is that clearer than the previous case? It’s not helped by the syntax decay from keywords to ternary symbology. Writing code with ternaries is dangerous because it’s easy to forget to structure code in an easily decomposable way.  Readability and aesthetics are always in the eye of the beholder, and are heavily influenced by experience with different paradigms.</p>

<p>We do end up with something that’s slightly terser, but that’s not the main point. This change <em>advertises something about the code</em>. More can happen in an <code class="highlighter-rouge">if</code>-statement than an <code class="highlighter-rouge">if</code>-expression: you can modify variables, call side-effecty <code class="highlighter-rouge">void</code> methods and so on. Making this an <code class="highlighter-rouge">if</code>-expression advertises that all we’re doing is returning one of two things.</p>

<p>It’s a more functional way of describing what the code’s doing. It could be argued I’m making the code more functional, but really all I’m doing is exposing the functional properties of the code which already existed. Whether you think this is a good thing in and of itself is up to you, but – as you’ll see – these changes make it easier to spot further functional refactorings down the line.</p>

<h3 id="principle-3-dont-treat-optionals-like-nulls">PRINCIPLE 3: Don’t treat Optionals like nulls</h3>

<p>The next thing I noticed was:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="k">return</span> <span class="pink"><span class="o">(</span><span class="n">dealIdFromResponse</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span></span>
        <span class="pink"><span class="o">?</span></span> <span class="n">dealIdFromResponse</span>
            <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">deal</span> <span class="o">=</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">);</span>
                <span class="k">return</span> <span class="blue"><span class="n">deal</span><span class="o">.</span><span class="na">isPresent</span><span class="o">()</span></span>
                    <span class="blue"><span class="o">?</span></span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">deal</span><span class="o">))</span>
                    <span class="blue"><span class="o">:</span></span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
            <span class="o">})</span>
        <span class="pink"><span class="o">:</span></span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()));</span>
<span class="o">}</span>
</code></pre>
</div>
<p><code class="highlighter-rouge">Optional</code>s are a really important addition to Java 8. Unfortunately, the general introduction to <code class="highlighter-rouge">Optional</code>s - that they’re a better way of addressing the problems we get with <code class="highlighter-rouge">null</code> – tends to result in <code class="highlighter-rouge">Optional</code>-handling code looking like <code class="highlighter-rouge">null</code>-handling code at first. Our method is currently a good example of that.</p>

<p><code class="highlighter-rouge">Optional</code>s don’t just exist to represent the possibility of absence. Viewing them as that means you miss the real benefit: safety.</p>

<p>Safety, because <code class="highlighter-rouge">Optional</code>s provide methods which force you to address the absent case. <code class="highlighter-rouge">Optional</code> provides 3 ways of getting a <code class="highlighter-rouge">T</code> out of an <code class="highlighter-rouge">Optional&lt;T&gt;</code>: <code class="highlighter-rouge">Optional::orElse</code>, <code class="highlighter-rouge">Optional::orElseGet</code>, and <code class="highlighter-rouge">Optional::orElseThrow</code>.  Each of these requires you to describe the result you want when the thing you know might not be there turns out to not be there.</p>

<p>Technically, it also provides <code class="highlighter-rouge">Optional::get</code>, which allows you access to the Java 8 version of <code class="highlighter-rouge">NullPointerException</code>s if you really want them. This should be considered an alias to <code class="highlighter-rouge">Optional.orElseThrow(BadAtProgrammingException::new)</code>.</p>

<p>The blue section here is easiest to refactor, from this:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">deal</span> <span class="o">=</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">);</span>
<span class="k">return</span> <span class="n">deal</span><span class="o">.</span><span class="na">isPresent</span><span class="o">()</span>
    <span class="o">?</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">deal</span><span class="o">))</span>
    <span class="o">:</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</code></pre>
</div>
<p>To this:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">deal</span> <span class="o">=</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">);</span>
<span class="k">return</span> <span class="n">deal</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">__</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">deal</span><span class="o">));</span>
</code></pre>
</div>
<p>This is a little awkward, because we’re mapping over an <code class="highlighter-rouge">Optional</code> but not using its contents, which feels a little unnatural. An alternative implementation is this:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">maybeDeal</span> <span class="o">=</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">);</span>
<span class="k">return</span> <span class="n">maybeDeal</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">deal</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">deal</span><span class="o">));</span>
</code></pre>
</div>
<p>Here we’re unwrapping and then re-wrapping the deal in an <code class="highlighter-rouge">Optional</code>. This does mean we can at least inline <code class="highlighter-rouge">findDeal</code> and the code won’t break. So our whole method now looks like this:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="k">return</span> <span class="pink"><span class="o">(</span><span class="n">dealIdFromResponse</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span></span>
        <span class="pink"><span class="o">?</span></span> <span class="n">dealIdFromResponse</span>
            <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span>
                <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">deal</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">deal</span><span class="o">))))</span>
        <span class="pink"><span class="o">:</span></span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()));</span>
<span class="o">}</span>
</code></pre>
</div>
<p>The pink section is also easy to refactor, as we’re already doing a mapping operation over it: we know if the deal isn’t present, we’ll have an <code class="highlighter-rouge">Optional.empty()</code>. So we can refactor this too:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="k">return</span> <span class="n">dealIdFromResponse</span>
        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span>
            <span class="n">of</span><span class="o">(</span><span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">deal</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">of</span><span class="o">(</span><span class="n">deal</span><span class="o">)))))</span>
        <span class="o">.</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">empty</span><span class="o">())));</span>
<span class="o">}</span>
</code></pre>
</div>
<p>There are a few important things to notice about this change:</p>

<ul>
  <li>I’ve statically imported Optional.of and Optional.empty for the blogpost to prevent word wrap. I’m not a fan of statically importing Optional.of as the loss of context diminishes meaning.</li>
  <li>I’ve used <code class="highlighter-rouge">orElseGet</code> with a lambda instead of just <code class="highlighter-rouge">orElse</code> with the value to prevent creating unnecessary objects. Generally, <code class="highlighter-rouge">orElseGet()</code> should be favoured over <code class="highlighter-rouge">orElse()</code> unless you already have an instance to return: in my opinion, little would be lost if the only way to get a <code class="highlighter-rouge">T</code> out of an <code class="highlighter-rouge">Optional&lt;T&gt;</code> was <code class="highlighter-rouge">orElseGet()</code>.</li>
  <li>In order to use <code class="highlighter-rouge">Optional</code>’s branching, we have to wrap our return values in more <code class="highlighter-rouge">Optional</code>s.</li>
</ul>

<h3 id="principle-4-think-outside-the-box">PRINCIPLE 4: Think outside the box</h3>

<p>At this point we started asking ourselves: this wrapping in <code class="highlighter-rouge">Optional</code>s is clunky, why are we doing that? We’re doing that in order to return an <code class="highlighter-rouge">Optional&lt;ResponseWithMaybeDeal&gt;</code>, because we’re in a situation where we can return <code class="highlighter-rouge">Optional.empty()</code>. Where’s the empty case?</p>

<p>Because of the way we’re composing nested optionals, it’s difficult to spot in this version of the code, compared to the original. The empty case is when we have a deal id on a response, but we can’t find a matching deal. So we’re doing two things in this method: augmenting with the deal, and filtering out invalid deal ids.</p>

<p>Functions should do one thing.</p>

<p>So, we changed what the function does, and moved the filtering outside. If we just pair the response to the corresponding deal (when we can find one), we no longer have a reason to wrap in an <code class="highlighter-rouge">Optional</code>, allowing us to go from this:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="pink"><span class="n">Optional</span></span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="k">return</span> <span class="n">dealIdFromResponse</span>
        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span>
            <span class="pink"><span class="n">of</span></span><span class="o">(</span><span class="n">maybeDeal</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">deal</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">of</span><span class="o">(</span><span class="n">deal</span><span class="o">))));</span>
        <span class="o">})</span>
        <span class="o">.</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="pink"><span class="n">of</span></span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">empty</span><span class="o">())));</span>
<span class="o">}</span>
</code></pre>
</div>
<p>To this:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">ResponseWithMaybeDeal</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="k">return</span> <span class="n">dealIdFromResponse</span>
        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span>
            <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">deal</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">deal</span><span class="o">))))</span>
        <span class="o">.</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()));</span>
<span class="o">}</span>
</code></pre>
</div>
<p>We could have made this simplification without having gone through the previous steps, but the path we were going down led us to question whether or not we were doing the right thing.</p>

<h3 id="principle-5-repeated-patterns-are-usually-liftable">PRINCIPLE 5: Repeated patterns are usually liftable</h3>

<p>The next thing I noticed was:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">ResponseWithMaybeDeal</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="k">return</span> <span class="n">dealIdFromResponse</span>
        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span>
            <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">deal</span> <span class="o">-&gt;</span> <span class="pink"><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span></span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">deal</span><span class="o">))))</span>
        <span class="o">.</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="pink"><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span></span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()));</span>
<span class="o">}</span>
</code></pre>
</div>
<p>We’re returning a ResponseWithMaybeDeal from this method, and we’re creating it on both paths. So we can simplify that by lifting that part out – first by extracting the return value into a variable:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">ResponseWithMaybeDeal</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="n">ResponseWithMaybeDeal</span> <span class="n">responseWithMaybeDeal</span> <span class="o">=</span> <span class="n">dealIdFromResponse</span>
        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">deal</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">deal</span><span class="o">))))</span>
        <span class="o">.</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()));</span>

    <span class="k">return</span> <span class="n">responseWithMaybeDeal</span><span class="o">;</span>
<span class="o">}</span>
</code></pre>
</div>
<p>And then pulling the construction up to the top level:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">ResponseWithMaybeDeal</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">maybeDeal</span> <span class="o">=</span> <span class="n">dealIdFromResponse</span>
        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">deal</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">deal</span><span class="o">)))</span>
        <span class="o">.</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">());</span>

    <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">maybeDeal</span><span class="o">);</span>
<span class="o">}</span>
</code></pre>
</div>
<p>We’re nearly done here, because even when that’s done, the pink code stuck out. We’re mapping an Optional to wrap its contents in another Optional, then taking it out, or otherwise returning empty? What does that even mean?</p>

<p>Turns out, it means exactly the same as:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">ResponseWithMaybeDeal</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">maybeDeal</span> <span class="o">=</span> <span class="n">dealIdFromResponse</span>
        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">));</span>

    <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">maybeDeal</span><span class="o">);</span>
<span class="o">}</span>
</code></pre>
</div>
<p>Which can then be inlined and method-reference-extracted to:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">ResponseWithMaybeDeal</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">maybeDeal</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">).</span><span class="na">flatMap</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">findDeal</span><span class="o">);</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">maybeDeal</span><span class="o">);</span>
<span class="o">}</span>
</code></pre>
</div>
<p>And, finally it feels like we’re done. First get a <code class="highlighter-rouge">maybeDeal</code> (by getting the deal id, and then looking up the deal, assuming they both exist), and then we construct a <code class="highlighter-rouge">ResponseWithMaybeDeal</code> with the <code class="highlighter-rouge">BidResponse</code> and the <code class="highlighter-rouge">maybeDeal</code>. It really does just do what it says on the tin.</p>

<h3 id="summing-up">SUMMING UP</h3>

<p>Before we go, let’s just reflect on how far we came - we started with this:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dealIdFromResponse</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">);</span>

    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="n">responseWithDeal1</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">dealIdFromResponse</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">responseWithDeal1</span> <span class="o">=</span> <span class="n">dealIdFromResponse</span>
            <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">dealId</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">deal</span> <span class="o">=</span> <span class="n">findDeal</span><span class="o">(</span><span class="n">dealId</span><span class="o">);</span>
                <span class="n">Optional</span><span class="o">&lt;</span><span class="n">ResponseWithMaybeDeal</span><span class="o">&gt;</span> <span class="n">responseWithDeal</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">deal</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">responseWithDeal</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">deal</span><span class="o">));</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">responseWithDeal</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="n">responseWithDeal</span><span class="o">;</span>
            <span class="o">});</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">responseWithDeal1</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()));</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">responseWithDeal1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre>
</div>
<p>And, through a series of tiny steps, each improving the code in its own right, ended up with this:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">ResponseWithMaybeDeal</span> <span class="nf">matchResponseToDeal</span><span class="o">(</span><span class="n">BidResponse</span> <span class="n">bidResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">UnrulySSPDeal</span><span class="o">&gt;</span> <span class="n">maybeDeal</span> <span class="o">=</span> <span class="n">getDealIdFromResponse</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">).</span><span class="na">flatMap</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">findDeal</span><span class="o">);</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseWithMaybeDeal</span><span class="o">(</span><span class="n">bidResponse</span><span class="o">,</span> <span class="n">maybeDeal</span><span class="o">);</span>
<span class="o">}</span>
</code></pre>
</div>

<p>You may argue that one or two of the steps weren’t an improvement in style, in and of themselves. I’m not sure I’d agree, but I can see how you might think that. However, that’s not the point. Each of the steps were part of a gradual progression towards the final result - an implementation which is clearly, objectively better than the original.</p>

<p>These refactorings aren’t just changes in style - they’re changes in form, replacing broad constructs with more restrictive ones. Each application is therefore a simplification: being we were <em>able</em> to apply them shows that our code is simpler than its original structure implies. Repeated applications of those refactorings took us to the simplest possible form, where our body does little more than restate the method name.</p>
