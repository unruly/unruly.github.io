<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Unruly Tech - Blog</title>
  <subtitle>Current going ons at Unruly's Development teams.</subtitle>
  <id>http://tech.unruly.co/blog</id>
  <link href="http://tech.unruly.co/blog"/>
  <link href="http://tech.unruly.co/blog/feed.xml" rel="self"/>
  <updated>2016-11-28T00:00:00+00:00</updated>
  <author>
    <name>Unruly</name>
  </author>
  <entry>
    <title>The Magical Quest for Componentisation</title>
    <link rel="alternate" href="http://tech.unruly.co/blog/2016/11/28/the-magical-quest-for-componentisation-index.html"/>
    <id>http://tech.unruly.co/blog/2016/11/28/the-magical-quest-for-componentisation-index.html</id>
    <published>2016-11-28T00:00:00+00:00</published>
    <updated>2018-03-14T16:05:35+00:00</updated>
    <author>
      <name>Unruly</name>
    </author>
    <content type="html">&lt;p&gt;I would like, if I may, to ask you an existential question.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the core of our job as developers today?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It probably &lt;strong&gt;isn&amp;rsquo;t&lt;/strong&gt; &lt;em&gt;figuring out the next super cool &amp;amp; complex algorithm.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But rather, what our job probably &lt;strong&gt;is&lt;/strong&gt;, is to &lt;em&gt;take an existing abstraction and compose it with a second abstraction in order to form a third abstraction&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What we&amp;rsquo;re still trying to figure out is how best to do that, right? For me, that quest began with modularisation. &lt;/p&gt;

&lt;h2 id="modularisation"&gt;Modularisation&lt;/h2&gt;

&lt;p&gt;Having been focussed on the Front End over the past decade, I spent several years evangelising &lt;em&gt;Backbone&lt;/em&gt; as a solution to tackling the challenge of Front End architecture. As a relatively early adopter of Backbone, in early 2011, I found the move from a messy soup of global Javascript objects with complex prototypical hierarchies, to a structured MVC (or rather, MVP) pattern an extremely pleasing step forward.&lt;/p&gt;

&lt;p&gt;Backbone allowed us to focus less one how the pieces of our code fit together, and more on what they actually did. This was made possible by abstracting away a lot of the boilerplate and defining a clear API for each piece of our system.
This might seem obvious in hindsight, but at the time this felt groundbreaking, mostly because we were so used to our Javascript existing as &lt;em&gt;a pile of code held together by duct tape&lt;/em&gt; that we accepted our fate and found it hard to see the potential for a better option.&lt;/p&gt;

&lt;p&gt;But the key &lt;em&gt;unique selling point&lt;/em&gt; of Backbone, beyond removing boilerplate and an enforced API, was laying the groundwork for proper &lt;strong&gt;modularisation&lt;/strong&gt; of our Javascript codebases.&lt;/p&gt;

&lt;p&gt;Modules are a corner stone of good code structuring, as they encourage us to break our code down into individual logical pieces. This makes it easier for us to write maintainable code that&amp;rsquo;s easier to reason about, to test and to reuse.&lt;/p&gt;

&lt;h2 id="rachel-39-s-trifle"&gt;Rachel&amp;rsquo;s Trifle&lt;/h2&gt;

&lt;p&gt;Backbone, though, as it turned out, was not the be-all and end-all solution to our problems.&lt;/p&gt;

&lt;p&gt;We could definitely leverage the benefits of MVC to achieve several things, such as breaking down our architecture into multitiered Object Oriented designs, to strive for separation of concerns by layering our modules and to design inheritance chains meant to improve code reuse and reduce complexity. But it seemed we would always end up hitting the same inevitable wall.&lt;/p&gt;

&lt;p&gt;As a codebase would grow, requirements would changed and assumptions turned out to be incorrect, we often found that our abstractions began to fail us.&lt;/p&gt;

&lt;p&gt;What we would initially envision as a well thought out and layered Trifle, turned out to be more a mixed up recipe, where layers don&amp;rsquo;t quite make sense anymore, they end up seeping into the layers above and bellow them and something just doesn&amp;rsquo;t taste quite right anymore. This in turn makes it harder to reuse code, to test it and to maintain it.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://media.giphy.com/media/4OW5VatORVtkI/giphy.gif" alt="Giphy" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rachel&amp;rsquo;s Trifle? Good.&lt;/em&gt; &lt;strong&gt;&lt;em&gt;Code Trifle&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;? Bad.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In other words, our code would develop a smell&amp;hellip; the unmistakable smell of a Custard, Jam, Mashed Potatoes and Meat dessert.&lt;/p&gt;

&lt;h2 id="wait-but-why"&gt;Wait, but why?&lt;/h2&gt;

&lt;p&gt;Einstein never actually said that &lt;em&gt;insanity is doing the same thing over and over again and expecting different results&lt;/em&gt;, but I&amp;rsquo;d like to think that he &lt;em&gt;would&lt;/em&gt; agree that when we find ourselves repeating a mistake, we should probably rethink our initial approach.&lt;/p&gt;

&lt;p&gt;I tried to identify the root causes for why so many of the teams I&amp;rsquo;d worked on ended up with these code smells and I narrowed them down to the following four:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building complex and / or distributed state machines&lt;/strong&gt;
We often try to manage state in many different places and try to reconcile this state throughout the lifecycle of the application. This is hard to do well, and leads to many implicit assumptions which easily break.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Big bags of instruction rather than atomic declarative pipes&lt;/strong&gt;
Instructions may be easy to follow, but not always easy to understand. They usually describe &lt;em&gt;what&lt;/em&gt; is done, rather than &lt;em&gt;why&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt;. This means that the developers are left to figure out the &lt;em&gt;why&lt;/em&gt; themselves. We&amp;rsquo;ve all found ourselves doing this, often referring to it as &lt;em&gt;reverse engineering our own code&lt;/em&gt; and we often end up misinterpreting the &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complex dependency chains reducing our ability to make atomic pieces of code&lt;/strong&gt;
We often find it hard to make truly atomic pieces of code as they have an inherent &lt;em&gt;need&lt;/em&gt; for a piece of data or operation that is the concern of another piece of the code.
Dependency will always exist in a complex systems, but in lieu of unified way of decoupling the dependency from its definition, you end up with strong cohesion between multiple components. This makes it extremly hard to test one component without having to build complex mocking mechanisms which are often coupled to the dependency&amp;rsquo;s implementation, leading to frequent breakage and difficult maintainance as dependencies change over time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trying to predict the future&lt;/strong&gt;
By far the biggest culprit for the dank code smell is a habit developers have of trying to predict how their code will be used instead of focusing on what is needed. This can lead to many problematic implementations, but most of all it leads to over engineering of solutions, which often leads to code that is very hard to &lt;em&gt;delete&lt;/em&gt; later.
I&amp;rsquo;m a firm believer that good code should be easy to delete and over engineering often makes that much harder to do.&lt;/p&gt;

&lt;h3 id="searching-for-answers"&gt;Searching for answers&lt;/h3&gt;

&lt;p&gt;Having boiled down my problem to its root causes, the next step would be to figure out what I could do to reduce their impact on how I write my code.
I believed these causes could be reduced to one core issue, which is that my code would often end up with &lt;strong&gt;High Efferent Coupling &amp;amp; Fragmented State&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Which begged the question:
&lt;strong&gt;&lt;em&gt;How on earth do we reduce our efferent coupling &amp;amp; fragmented State?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Searching high and low for an answer I hit the internet, the books, the tech talks, my dad (I didn&amp;rsquo;t literally hit my dad, I just asked his opinion, as he&amp;rsquo;s been writing code since the 70s, presumably with hippie hair and a spliff) and found that there are infact many possible answers to this question.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t enumerate all of them, but one answer would show up repeatedly, and that was a quote which I&amp;rsquo;d heard many times before:&lt;/p&gt;

&lt;p&gt;&lt;img src="../../../2016-11-28-the-magical-quest-for-componentisation/favor.png" alt="Favor" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; &lt;em&gt;Note the year in which this book, considered a religious tome by many developers, was released. 1994. That&amp;rsquo;s 22 years ago, that&amp;rsquo;s it. If anything serves to remind us that we&amp;rsquo;re still &amp;ldquo;just figuring out this shit, because it&amp;rsquo;s bloody new&amp;rdquo;, it&amp;rsquo;s that.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In fact, this quote has been repeated so many times by so many people, I&amp;rsquo;ve began to find it &lt;em&gt;eye-roll inducing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The reason I found this quote slightly annoying was that the more I discussed this topic with experienced developers, the more it would reminde me of another quote.&lt;/p&gt;

&lt;p&gt;&lt;img src="../../../2016-11-28-the-magical-quest-for-componentisation/theory.png" alt="Theory" /&gt;&lt;/p&gt;

&lt;p&gt;While it seemed many developers appreciated the wisdom in this advice, reflected in the fact that it has been featured in innumerable talks and blog posts, very few could actually show me &lt;em&gt;how to achieve this&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Composability&lt;/em&gt; is not an inherently clear idea, and while many developers seems perfectly capable of coding up an example in an IDE, they never seemed to actually follow through when it came to their codebase. And most annoying, they knew it, but couldn&amp;rsquo;t quite translate this theory into practicality once they had real problems they needed to solve.&lt;/p&gt;

&lt;h3 id="what-is-composition"&gt;What is Composition?&lt;/h3&gt;

&lt;p&gt;So to figure out how to achieve &lt;em&gt;composability&lt;/em&gt;, we first need to understand what &lt;em&gt;composition&lt;/em&gt; actually means.&lt;/p&gt;

&lt;p&gt;To the best of my understanding there are two kinds of composition.&lt;/p&gt;

&lt;p&gt;The first is &lt;strong&gt;functional composition&lt;/strong&gt;. I&amp;rsquo;ll assume for the sake of succinctness, that you already know what functional composition is, as this blog post is already way too long.&lt;/p&gt;

&lt;p&gt;But just to make sure we&amp;rsquo;re on the same page I&amp;rsquo;ll clarify that when I say functional composition, what I mean is that, in the following snippet, the &lt;strong&gt;h&lt;/strong&gt; function is the &lt;em&gt;functional composition&lt;/em&gt; of the &lt;strong&gt;g&lt;/strong&gt; and &lt;strong&gt;f&lt;/strong&gt; functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;const g = () =&amp;gt; {}
const f = () =&amp;gt; {}

// (g ∘ f )(x) = g(f(x))
const h = (...args) =&amp;gt; g(f(...args))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second kind of composition is &lt;strong&gt;object composition&lt;/strong&gt;, and this is where I got stuck.&lt;/p&gt;

&lt;p&gt;I just couldn&amp;rsquo;t wrap my brain around how I was supposed to take the theory of Functional Composition and apply it to complex objects. How to structure the pieces of my code and make them work together without relegating back to old and smelly practices.&lt;/p&gt;

&lt;h4 id="what-is-object-composition"&gt;What is Object Composition?&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://twitter.com/_ericelliott"&gt;Eric Elliot&lt;/a&gt; gave a really good talk at &lt;a href="https://www.youtube.com/watch?v=lKCCZTUx0sI"&gt;Fluent 2013&lt;/a&gt; in which he explains object composition and its benefits in a much better way than I ever could, so I&amp;rsquo;d highly recommend watching his talk.&lt;/p&gt;

&lt;p&gt;But after experimenting with Eric&amp;rsquo;s proposed solution, a library called &lt;a href="https://github.com/stampit-org/stampit"&gt;StampIt&lt;/a&gt;, I still couldn&amp;rsquo;t see how I could avoid the high Efferent Coupling I was experiencing, nor did it do much to help me tackle the fragmented state.&lt;/p&gt;

&lt;p&gt;This feeling of frustration with the smell of my code would stay with me for a while, until recently, when I began using &lt;em&gt;React&lt;/em&gt; in production. It wasn&amp;rsquo;t immediately apparent to me how React seemed to alleviate many of the problems I was experiencing, nor do I want to tote React as necceserily a &lt;em&gt;solution&lt;/em&gt; to these problems.&lt;/p&gt;

&lt;p&gt;What I have found &lt;em&gt;React&lt;/em&gt; to be though, is an opportunity to alleviate many of the causes for these code smells, and that&amp;rsquo;s the actual topic I want to talk about.&lt;/p&gt;

&lt;h2 id="composability-via-componentisation"&gt;Composability via Componentisation&lt;/h2&gt;

&lt;p&gt;I often hear developers talk about the difference between the &lt;em&gt;react&lt;/em&gt; package and the &lt;em&gt;react-dom&lt;/em&gt; package. They seem to always focus on how the separation provides the ability to use &lt;em&gt;React&lt;/em&gt;&amp;rsquo;s top level API to define &lt;em&gt;loosely coupled&lt;/em&gt; components for different Renderers and Reconciler in order to share components and logic between different target technologies. They will also discuss how the uniderectional flow of data aids in avoiding &lt;em&gt;fragmented state&lt;/em&gt;. Sadly, though, it&amp;rsquo;s much more unusual though to hear them  discuss what it is about the top level API that makes it so well suited for building such a wide variety of components with relatively low efferent coupling.&lt;/p&gt;

&lt;p&gt;React is often toted around as highly declarative, composable and encapsulated. In fact, these descriptions are stated on the React homepage, but no where in the documentation is it discussed what it is about React&amp;rsquo;s API that allows for these traits. These traits are simply stated as fact.&lt;/p&gt;

&lt;p&gt;I guess the rest of the Javascript community is much more practical than I am, because I found myself much more concerned with &lt;em&gt;why&lt;/em&gt; it worked than anyone else I talked to.&lt;/p&gt;

&lt;h3 id="from-function-to-component"&gt;From Function to Component&lt;/h3&gt;

&lt;p&gt;It wasn&amp;rsquo;t until I started analysing the React API that I got my &amp;ldquo;AHA!&amp;rdquo; moment.
What I realised was that a direct parallel can be made between the API of Functional Composition and the React API. &lt;/p&gt;

&lt;p&gt;Lets break down the API of Functional Composition and label the different building blocks:&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;// We&amp;#39;ll label g() and f() as the `parent` and `child` functions
const parent = () =&amp;gt; {}
const child = () =&amp;gt; {}

// we&amp;#39;ll label the arguments for the composition as `props`
const props = [x, y, z]
// we&amp;#39;ll add a little flexability by allowing the parent and child
// to have their own arguments, and leaving it up to the parent to decide
// what to do with the child
const childProps = [a, b, c]

const composition = (props) =&amp;gt; parent(props, child(childProps))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this might not be immediately apparent, the above composition is actually reminiscent of &lt;em&gt;React&lt;/em&gt;&amp;rsquo;s top level API. In order to see it though, we&amp;rsquo;ll have fade away some of the layers of abstraction provided by JSX.&lt;/p&gt;

&lt;p&gt;If you look at the React docs you&amp;rsquo;ll find an &lt;a href="https://facebook.github.io/react/docs/jsx-in-depth.html"&gt;article explaining JSX&amp;rsquo;s compilation target&lt;/a&gt;.
Specifically what might interest you is how the following JSX:&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;&amp;lt;MyButton color=&amp;quot;blue&amp;quot; shadowSize={2}&amp;gt;
  &amp;lt;Echo value=&amp;quot;Click Me&amp;quot; /&amp;gt;
&amp;lt;/MyButton&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;compiles to:&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;React.createElement(
  MyButton,
  {color: &amp;#39;blue&amp;#39;, shadowSize: 2},
  React.createElement(
    Echo,
    {value: &amp;#39;Click Me&amp;#39;}
  )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While it might not be apparent at first glance, this API could easily be a wrapper for the functional composition we built a couple of snippets ago.&lt;/p&gt;

&lt;p&gt;Lets replace the React Component references and props with the labels we defined in our snippet.&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;React.createElement(
  parent,
  props,
  React.createElement(
    child,
    childProps
  )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This might seem obvious in hindsight, but by adding a little abstraction and expanding flexibility by allowing the parent functions to have their own arguments in addition to the return values of the child functions, React has actually provided us with a highly flexible API for Object Composition.
By defining a strict API for the communication between all pieces of your code, you achieve an ideal situation where:
1. Every piece of your code knows how to talk to every other piece
2. Every piece of your code can be passed as an argument to any other piece&lt;/p&gt;

&lt;p&gt;I tried asking a couple of members of the React core team what they would call this design pattern, but sadly never got an answer. Considering how swamped they must be with issues, emails and life, I decided not to pursue them further and simply named this design pattern thus: &lt;strong&gt;Componentisation&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id="the-rules-of-componentisation"&gt;The rules of Componentisation&lt;/h3&gt;

&lt;p&gt;Considering the componentisation API as a generic design pattern I defined a set of 7 rules which any library must follow in order to provide the composability I strive for:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Every composed object must be either a Component or at most a built in type&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is one parent object&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There can be multiple child objects&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A parent object can receive its own arguments (rather than being limitted to receiving the return value of child objects)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;child objects can receive their own arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A parent object can interact with a single child independantly and with all children as a group&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A component doesn’t have to “know” its children in order to interact with them&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I believe that any library that follows these rules could, in theory, provide the high level of composability required to build complex systems without compromising on low cohesiveness and efferent coupling.&lt;/p&gt;

&lt;h2 id="bottom-line"&gt;Bottom Line&lt;/h2&gt;

&lt;p&gt;The point of this article isn&amp;rsquo;t to claim that React or Componentisation is a magical solution to all your problems.
Rather, that Componentisation is about providing a framework (as in a basic structure, not as in a &lt;em&gt;Javascript Framework&lt;/em&gt;) which can facilitate the authorship of loosely coupled code, with less code smell.&lt;/p&gt;

&lt;p&gt;But it is also important to keep in mind that componentisation alone cannot promise you these traits. In order to achieve these, you must first understand &lt;em&gt;what it is&lt;/em&gt; about componentisation that provides them and then you need to maintain the dicipline of constantly making sure the code you author sticks to the framework and only deviates when absolutly neccesery.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know about you, but I find the fact that the Componentisation API is becoming so ubiquitous thanks to React, a really exciting point. It means we can start using this approach in our code, not as an &lt;em&gt;&amp;ldquo;awesome in-house library that new developers need to learn&amp;rdquo;&lt;/em&gt; but rather a well accepted approach to modeling code, that developers coming from the React ecosystem already know how to reason about. It means we can start &lt;strong&gt;thinking in components&lt;/strong&gt; throughout our codebase, not just the UI. &lt;/p&gt;

&lt;p&gt;And so this has been my quest for the secret of componentisation. When I set out I had no idea what I might find, if at all, and there were points where I almost gave up on the search.
And like all good quests, this one leads to another one, a sequal if you will, to find a way to start using componentisation in more aspects of my work, not just building UIs, to which we&amp;rsquo;ll come in a future article I&amp;rsquo;m working on.&lt;/p&gt;

&lt;p&gt;In addition I&amp;rsquo;m putting together an article in which I will present you with various design patterns we can follow with componentisation which can help you take advantage of the componentisation paradigm.&lt;/p&gt;

&lt;p&gt;So there&amp;rsquo;s plenty to look forward to! &lt;/p&gt;

&lt;h3 id="learning-more"&gt;Learning more&lt;/h3&gt;

&lt;p&gt;Following the React core team on Twitter and Github provided true insight into how this API is transforming the way developers are writing code since the library was introduced.&lt;/p&gt;

&lt;p&gt;For example, the following thread by Sebastian Markbåge caused my brain to turn inside out at one point.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I refer to the number of components in your application layer, component layer, layout layer, rendering layer as: Horizontal surface area.&lt;/p&gt;&amp;mdash; Sebastian Markbåge (@sebmarkbage) &lt;a href="https://twitter.com/sebmarkbage/status/704737113007259648"&gt;March 1, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;The number of layers for a feature is: Vertical surface area. React can expand to include more verticals without growing horizontally.&lt;/p&gt;&amp;mdash; Sebastian Markbåge (@sebmarkbage) &lt;a href="https://twitter.com/sebmarkbage/status/704737495448055808"&gt;March 1, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;This is what will keep React from becoming a huge monolith yet get synergy effects from vertical integration. &lt;a href="https://t.co/oukDDLw7a6"&gt;https://t.co/oukDDLw7a6&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sebastian Markbåge (@sebmarkbage) &lt;a href="https://twitter.com/sebmarkbage/status/704738517641920512"&gt;March 1, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;I &lt;a href="https://twitter.com/sebmarkbage"&gt;would&lt;/a&gt; &lt;a href="https://twitter.com/dan_abramov"&gt;highly&lt;/a&gt; &lt;a href="https://twitter.com/_chenglou"&gt;recommend&lt;/a&gt; &lt;a href="https://twitter.com/zpao"&gt;following&lt;/a&gt; &lt;a href="https://twitter.com/soprano"&gt;them&lt;/a&gt; and reading the &lt;a href="https://github.com/facebook/react/issues"&gt;issues on the GitHub repo&lt;/a&gt;. I&amp;rsquo;ve learned alot from doing just that and I&amp;rsquo;m sure you will too.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Free Learning</title>
    <link rel="alternate" href="http://tech.unruly.co/blog/2016/11/26/free-learning.html"/>
    <id>http://tech.unruly.co/blog/2016/11/26/free-learning.html</id>
    <published>2016-11-26T14:20:00+00:00</published>
    <updated>2018-03-14T16:05:35+00:00</updated>
    <author>
      <name>Unruly</name>
    </author>
    <content type="html">&lt;p&gt;Imagine getting a day every week for your own technical learning. Pick whatever language or framework you like and spend the entire day learning more about it during paid hours! A massive benefit to any developer keen to keep up with a multitude of tools and practice new skills.  &lt;/p&gt;

&lt;p&gt;All our developers are encouraged to take a learning day every week. We call these “Gold Card” days and each team figures out who wants to take one during the daily standup meeting. On a typical day, we&amp;rsquo;ll have a couple of pairs implementing a user story or technical tasks, one person on support duty and the remainder of the team taking learning or research time. A simple grid on a whiteboard is used to ensure no one misses taking theirs. We want everyone to improve and if I don&amp;rsquo;t take a learning day, it&amp;rsquo;s bound to come up in team retrospective.&lt;/p&gt;

&lt;p&gt;Last week I joined a conversation about “20% Learning Time” at &lt;a href="https://2016.godigital.is/open-space.html"&gt;GoDigital&lt;/a&gt; conference, there were lots of questions about how this works in practice. An essential aspect is that we trust developers to use this time wisely. There’s no checking up or pressure to pick certain learning topics relevant to the work. The only expectation is that at the end of the week, you show up to “Gold Card Catchup” to share a little bit about what you learned and perhaps demo something you built to your fellow developers. Making time to share what we learned is vital to sustaining learning time. We get inspired hearing about what other developers have been looking into and it encourages us pick something for our own learning that demonstrates what we’re interested in too. &lt;/p&gt;

&lt;p&gt;Sometimes developers with shared interests team up on their gold cards and even make the results of their day together available to the wider team afterwards. Although most developers appreciate a quiet day of learning, as a break from the intense collaboration of pair and mob programming. Some developers like to take their learning day alongside teams in our open workspace while others prefer to find solitude on a comfy sofa.&lt;/p&gt;

&lt;p&gt;Teams at Unruly have been taking Gold Cards for some years now but the idea (and the name) goes back in 2001, as explained in &lt;a href="http://www.morethan.technology/downloads/papers/InnovationAndSustainabilityWithGoldCards.pdf"&gt;this experience report&lt;/a&gt; at XPUniverse conference. There’s much more to our learning culture than Gold Cards too. We also hold regular tech talks and coding dojos. &lt;/p&gt;

&lt;p&gt;Learning is a gift that keeps on giving. Making learning time part of our daily work helps our developers improve their skills and fosters a culture of exploration and innovation. I hope to see more workplaces offer learning time more freely. Trusting developers to drive their own learning is a vital sign of respect and belief in their potential.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Refactoring towards Functionality</title>
    <link rel="alternate" href="http://tech.unruly.co/blog/2016/11/11/refactoring-towards-functionality-index.html"/>
    <id>http://tech.unruly.co/blog/2016/11/11/refactoring-towards-functionality-index.html</id>
    <published>2016-11-11T00:00:00+00:00</published>
    <updated>2018-03-14T16:05:35+00:00</updated>
    <author>
      <name>Unruly</name>
    </author>
    <content type="html">&lt;p&gt;Yesterday, I refactored a method.&lt;/p&gt;

&lt;p&gt;Nothing unusual about that - we refactor code constantly. Code is, after all, better described as something grown than something built, and a large part of gardening is keeping the weeds in check. Normally, I wouldn’t have given it a second thought.&lt;/p&gt;

&lt;p&gt;What was unusual, though, was this was my first time pairing with Sarah, who’s relatively new to Java 8 constructs like Optionals. Pairing with someone new often leads to more discussion of what’s being done and why, which can provoke some interesting reflections.&lt;/p&gt;

&lt;p&gt;As we stepped through the refactorings, I noticed a few simple pressures were guiding us towards a functional approach. Each one only made a small, incremental improvement. Together, they had a huge effect on the code.&lt;/p&gt;

&lt;p&gt;Here’s the original code:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;responseWithDeal1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;responseWithDeal1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;responseWithDeal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;responseWithDeal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;responseWithDeal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;responseWithDeal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;responseWithDeal1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;responseWithDeal1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;My first impression: well, I can trace through that and understand what’s going on, but it’s a little hairy. Let’s see if we can smooth it out a bit.&lt;/p&gt;

&lt;h3 id="principle-1-favour-early-return-over-single-return"&gt;PRINCIPLE 1: Favour early-return over single-return.&lt;/h3&gt;

&lt;p&gt;The first thing I noticed was this:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="pink"&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;responseWithDeal1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="pink"&gt;&lt;span class="n"&gt;responseWithDeal1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="blue"&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;responseWithDeal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="blue"&gt;&lt;span class="n"&gt;responseWithDeal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="blue"&gt;&lt;span class="n"&gt;responseWithDeal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="blue"&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;responseWithDeal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/span&gt;
            &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="pink"&gt;&lt;span class="n"&gt;responseWithDeal1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="pink"&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;responseWithDeal1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here we have two examples of the single-return style, one in the method itself and one in a lambda contained within the method. Arguments exist as to which of single-return and early-return style is more readable – personally, I find that tracking changes through mutable variables like this is harder to reason about than just returning values when you have them. Returning rather than assigning gives us:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="unused"&gt;&lt;span class="n"&gt;responseWithDeal1&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="unused"&gt;&lt;span class="n"&gt;responseWithDeal&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="error"&gt;&lt;span class="n"&gt;responseWithDeal&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="error"&gt;&lt;span class="n"&gt;responseWithDeal1&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;That’s reassuring, we have compile errors on the original return statements as they’re unreachable, and the variables are unused. It’s always nice when your IDE confirms that you’ve hit all the cases. Get rid of those lines and we get:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id="principle-2-favour-if-expressions-over-if-statements"&gt;PRINCIPLE 2: Favour if-expressions over if-statements&lt;/h3&gt;

&lt;p&gt;The next thing I noticed was this:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="pink"&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="pink"&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="blue"&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="blue"&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="blue"&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="blue"&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="pink"&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="pink"&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We have two &lt;code class="highlighter-rouge"&gt;if&lt;/code&gt; statements here, with both &lt;code class="highlighter-rouge"&gt;if&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;else&lt;/code&gt; clauses, each of which returns immediately. These can be replaced with &lt;code class="highlighter-rouge"&gt;if&lt;/code&gt;-expressions:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
        &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                    &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                    &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;})&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Is that prettier than the previous case? Is it clearer?&lt;/p&gt;

&lt;p&gt;It’s not helped by the syntax decay from keywords to ternary symbology. Writing code with ternaries is dangerous because it’s easy to forget to structure code in an easily decomposable way.  Readability and aesthetics are always in the eye of the beholder, and are heavily influenced by experience with different paradigms.&lt;/p&gt;

&lt;p&gt;We now have something that’s slightly terser. More importantly, this change &lt;em&gt;advertises something about the code&lt;/em&gt;. More can happen in an &lt;code class="highlighter-rouge"&gt;if&lt;/code&gt;-statement than an &lt;code class="highlighter-rouge"&gt;if&lt;/code&gt;-expression: you can modify variables, call side-effecty &lt;code class="highlighter-rouge"&gt;void&lt;/code&gt; methods and so on. Making this an &lt;code class="highlighter-rouge"&gt;if&lt;/code&gt;-expression advertises that all we’re doing is returning one of two things.&lt;/p&gt;

&lt;p&gt;It’s a more functional way of describing what the code’s doing. I’m not &lt;em&gt;making&lt;/em&gt; the code more functional; I’m just &lt;em&gt;exposing&lt;/em&gt; the functional properties of the code which already existed. Whether you think this is a good thing in and of itself is up to you, but – as you’ll see – these changes make it easier to spot further functional refactorings down the line.&lt;/p&gt;

&lt;h3 id="principle-3-dont-treat-optionals-like-nulls"&gt;PRINCIPLE 3: Don’t treat Optionals like nulls&lt;/h3&gt;

&lt;p&gt;The next thing I noticed was:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="pink"&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pink"&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="blue"&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;/span&gt;
                    &lt;span class="blue"&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                    &lt;span class="blue"&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;})&lt;/span&gt;
        &lt;span class="pink"&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt;s are a really important addition to Java 8. Unfortunately, the general introduction to &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt;s - that they’re a better way of addressing the problems we get with &lt;code class="highlighter-rouge"&gt;null&lt;/code&gt; – tends to result in &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt;-handling code looking like &lt;code class="highlighter-rouge"&gt;null&lt;/code&gt;-handling code at first. Our method is currently a good example of that.&lt;/p&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt;s don’t just exist to represent the possibility of absence. Viewing them as that means you miss the real benefit: safety.&lt;/p&gt;

&lt;p&gt;Safety, because &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt;s provide methods which force you to address the absent case. &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt; provides 3 ways of getting a &lt;code class="highlighter-rouge"&gt;T&lt;/code&gt; out of an &lt;code class="highlighter-rouge"&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt;: &lt;code class="highlighter-rouge"&gt;Optional::orElse&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Optional::orElseGet&lt;/code&gt;, and &lt;code class="highlighter-rouge"&gt;Optional::orElseThrow&lt;/code&gt;.  Each of these requires you to describe the result you want when the thing you know might not be there turns out to not be there.&lt;/p&gt;

&lt;p&gt;Technically, it also provides &lt;code class="highlighter-rouge"&gt;Optional::get&lt;/code&gt;, which allows you access to the Java 8 version of &lt;code class="highlighter-rouge"&gt;NullPointerException&lt;/code&gt;s if you really want them. This should be considered an alias to &lt;code class="highlighter-rouge"&gt;Optional.orElseThrow(BadAtProgrammingException::new)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The blue section here is easiest to refactor, from this:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To this:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is a little awkward, because we’re mapping over an &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt; but not using its contents, which… isn’t really a mapping. An alternative implementation is this:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;maybeDeal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;maybeDeal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here we’re unwrapping and then re-wrapping the deal in an &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt;, which means we can inline &lt;code class="highlighter-rouge"&gt;findDeal&lt;/code&gt;. So our whole method now looks like this:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="pink"&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pink"&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;))))&lt;/span&gt;
        &lt;span class="pink"&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The pink section is also easy to refactor, as we’re already doing a mapping operation over it: we know if the deal isn’t present, we’ll have an &lt;code class="highlighter-rouge"&gt;Optional.empty()&lt;/code&gt;. So we can refactor this too:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;)))))&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orElseGet&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;())));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;There are a few important things to notice about this change:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’ve statically imported Optional.of and Optional.empty for the blogpost to prevent word wrap. I’m not a fan of statically importing Optional.of as the loss of context diminishes meaning.&lt;/li&gt;
  &lt;li&gt;I’ve used &lt;code class="highlighter-rouge"&gt;orElseGet&lt;/code&gt; with a lambda instead of just &lt;code class="highlighter-rouge"&gt;orElse&lt;/code&gt; with the value to prevent creating unnecessary objects. Generally, &lt;code class="highlighter-rouge"&gt;orElseGet()&lt;/code&gt; should be favoured over &lt;code class="highlighter-rouge"&gt;orElse()&lt;/code&gt; unless you already have an instance to return. In my opinion, little would be lost if the only way to get a &lt;code class="highlighter-rouge"&gt;T&lt;/code&gt; out of an &lt;code class="highlighter-rouge"&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt; was &lt;code class="highlighter-rouge"&gt;orElseGet()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In order to use &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt;’s branching, we have to wrap our return values in more &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt;s.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="principle-4-think-outside-the-box"&gt;PRINCIPLE 4: Think outside the box&lt;/h3&gt;

&lt;p&gt;At this point we started asking ourselves: this wrapping in &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt;s is clunky, why are we doing that? We’re doing that in order to return an &lt;code class="highlighter-rouge"&gt;Optional&amp;lt;ResponseWithMaybeDeal&amp;gt;&lt;/code&gt;, because we’re in a situation where we can return &lt;code class="highlighter-rouge"&gt;Optional.empty()&lt;/code&gt;. Where’s the empty case?&lt;/p&gt;

&lt;p&gt;Because of the way we’re composing nested optionals, it’s difficult to spot in this version of the code, compared to the original. The empty case is when we have a deal id on a response, but we can’t find a matching deal. So we’re doing two things in this method: augmenting with the deal, and filtering out invalid deal ids.&lt;/p&gt;

&lt;p&gt;Functions should do one thing.&lt;/p&gt;

&lt;p&gt;So, we changed what the function does, and moved the filtering outside. If we just pair the response to the corresponding deal (when we can find one), we no longer have a reason to wrap in an &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt;, allowing us to go from this:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="pink"&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="pink"&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maybeDeal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;))));&lt;/span&gt;
        &lt;span class="o"&gt;})&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orElseGet&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pink"&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;())));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To this:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;))))&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orElseGet&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We could have made this simplification without having gone through the previous steps, but the path we were going down led us to question whether or not we were doing the right thing.&lt;/p&gt;

&lt;h3 id="principle-5-repeated-patterns-are-usually-liftable"&gt;PRINCIPLE 5: Repeated patterns are usually liftable&lt;/h3&gt;

&lt;p&gt;The next thing we noticed was:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pink"&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;))))&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orElseGet&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pink"&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We’re returning a ResponseWithMaybeDeal from this method, and we’re creating it on both paths. So we can simplify that by lifting that part out – first by extracting the return value into a variable:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt; &lt;span class="n"&gt;responseWithMaybeDeal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;))))&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orElseGet&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;responseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And then pulling the construction up to the top level:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;maybeDeal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="blue"&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="pink"&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orElseGet&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maybeDeal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Even when that’s done, the pink code stuck out. orElseGet() returns an empty &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt;? Why would we do that instead of just taking the &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt; we’re calling it on?&lt;/p&gt;

&lt;p&gt;That’s because after flatmapping, we have an &lt;code class="highlighter-rouge"&gt;Optional&amp;lt;Optional&amp;lt;UnrulySSPDeal&amp;gt;&amp;gt;&lt;/code&gt;, and we need an &lt;code class="highlighter-rouge"&gt;Optional&amp;lt;UnrulySSPDeal&amp;gt;&lt;/code&gt;: we have two layers of &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt; wrapping. This isn’t a side-effect of working with &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt;s, it’s deliberately introduced in the blue section, which is now kinda redundant. So we can refactor that to:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;maybeDeal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maybeDeal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Which can then be inlined and method-reference-extracted to:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;maybeDeal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maybeDeal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And, finally, it feels like we’re done. First get a &lt;code class="highlighter-rouge"&gt;maybeDeal&lt;/code&gt; (by getting the deal id, and then looking up the deal, assuming they both exist), and then we construct a &lt;code class="highlighter-rouge"&gt;ResponseWithMaybeDeal&lt;/code&gt; with the &lt;code class="highlighter-rouge"&gt;BidResponse&lt;/code&gt; and the &lt;code class="highlighter-rouge"&gt;maybeDeal&lt;/code&gt;. It really does just do what it says on the tin.&lt;/p&gt;

&lt;h3 id="summing-up"&gt;SUMMING UP&lt;/h3&gt;

&lt;p&gt;Before we go, let’s just reflect on how far we came - we started with this:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;responseWithDeal1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;responseWithDeal1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dealIdFromResponse&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dealId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;responseWithDeal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;responseWithDeal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;responseWithDeal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;responseWithDeal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;responseWithDeal1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;responseWithDeal1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And, through a series of tiny steps, each improving the code in its own right, ended up with this:&lt;/p&gt;

&lt;div class="language-java highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ResponseWithMaybeDeal&lt;/span&gt; &lt;span class="nf"&gt;matchResponseToDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BidResponse&lt;/span&gt; &lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UnrulySSPDeal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;maybeDeal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDealIdFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;findDeal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ResponseWithMaybeDeal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bidResponse&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maybeDeal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You may argue that one or two of the steps weren’t an improvement in style, in and of themselves. I’m not sure I’d agree, but I can see how you might think that. However, that’s not the point. Each of the steps were part of a gradual progression towards the final result - an implementation which is clearly, objectively better than the original.&lt;/p&gt;

&lt;p&gt;These refactorings aren’t just changes in style - they’re changes in form, replacing broad constructs with more restrictive ones. Each application is therefore a simplification: being &lt;em&gt;able&lt;/em&gt; to apply them shows that our code is simpler than its original structure implies. Repeated applications of those refactorings took us to the simplest possible form.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Building Products From the Inside-Out</title>
    <link rel="alternate" href="http://tech.unruly.co/blog/2016/11/05/building-products-inside-out.html"/>
    <id>http://tech.unruly.co/blog/2016/11/05/building-products-inside-out.html</id>
    <published>2016-11-05T14:20:00+00:00</published>
    <updated>2018-03-14T16:05:35+00:00</updated>
    <author>
      <name>Unruly</name>
    </author>
    <content type="html">&lt;p&gt;How exactly do you go about building minimum viable products following Eric Ries’s &lt;a href="http://theleanstartup.com/principles"&gt;Build-Measure-Learn&lt;/a&gt; cycle set out in his &lt;a href="http://theleanstartup.com/book"&gt;Lean Startup&lt;/a&gt; book? An approach you’ve probably heard about can be characterised as “Outside-In”. Start by building an interface that users can engage with and add implementation based on what you learn about their preferences from these interactions. This Outside-In technique is ideal for front-end heavy products aimed at the man-on-the-street. But what if you’re building services used by other businesses or your own?&lt;/p&gt;

&lt;p&gt;An alternative technique, we use at Unruly, is to build minimum viable products “Inside-Out”. We start by building just enough product to generate business value and defer building any user interface to configure these products until a later date when we know more about what’s needed. How does this work in practice? Well, we build services that are configured on the inside by developers and only make features configurable from the outside when we’re confident we know enough about what generates revenue. This approach enables us to test the market for a feature and learn more about various configurations that are needed by our business before we add controls to make these features serve-serve.&lt;/p&gt;

&lt;p&gt;Here’s a simple example. Say we’re being asked by our stakeholders to introduce the capability to block ads that don’t render properly - this is valuable to our business because these ads could win slots on publisher pages but if they don’t display properly we won’t be able to charge for them. When this request comes up, we don’t know how popular this ad blocking capability will be. We may be able to pursue alternative approaches to block ads at other points in the ad serving pipeline. We may also find that such ads cannot effectively be blocked in this way, if their identities only have a short lifetime. Given this situation, it doesn’t make sense for us to invest in making a user interface to configure ad blocking yet. &lt;/p&gt;

&lt;p&gt;Instead, our first step is implement a minimum viable product by adding the capability to block ads using a hard-coded list of ad ids in our real-time bidding exchange. Sounds yucky but we don’t know whether it’s worth investing more time in this yet. Once this is live, we let our business teams know to send in a support ticket when they’d like to get an ad blocked. Now we wait for support tickets to trickle in.&lt;/p&gt;

&lt;p&gt;A couple weeks after the feature is released, we get our first support ticket requesting an ad to be blocked. The id to be blocked is added into our new list within the exchange and deployed. When the next ticket comes in, the list gets longer, this prompts a refactor to make it easier to manage the list of blocked ad ids. The day after that the original ad block is requested to be removed. Today we only have a single ad block in the exchange and so it’s definitely not worth investing in building a user interface to configure these.&lt;/p&gt;

&lt;p&gt;If we continue to receive more requests, the activity to block ads via this hard coded list starts to eat up developer time. We now propose a story to move the list of blocked ad ids out into a flat file that can be manually edited by our solutions engineers and pushed to our servers using a script. If editing the configuration is fiddly, we’ll invest more time in scripts to make this easier and less error prone.&lt;/p&gt;

&lt;p&gt;We are likely to operate ad blocking in MVP-mode for several months. When it becomes valuable enough to turn such ad blocking requests around faster, we’ll figure out a logical place to provide a user interface for our Ad Operations teams to configure this setting themselves. However, if this feature turns out not to be as valuable as anticipated, we’ll consider retiring this capability.&lt;/p&gt;

&lt;p&gt;Are there any gotchas with this inside-out approach to building MVP? Well, this approach adds to the &lt;a href="https://michaelfeathers.silvrback.com/to-kill-code"&gt;carrying cost&lt;/a&gt; of these features until they are fully productised. Some of these product features never get fully productised and the carrying cost for several months may end up as more than the implementation of fully fledged features. Our business users also end up waiting upto a day to have configuration set for them and there’s potential value lost by not being able to switch settings immediately. And yes sometimes systems feel a bit &lt;a href="https://en.wikipedia.org/wiki/W._Heath_Robinson"&gt;Heath Robinson&lt;/a&gt; when configuration is done in various places at the backend.&lt;/p&gt;

&lt;p&gt;The benefit for us, in taking an inside-out approach to building our products, is that we can get these features out of the door quickly and generate revenue quickly. Making product features available via manual configuration buys us time to figure out whether we want to invest in a proper self-serve business process around new features, that have been mooted before fully getting to grips with likely uptake and consequences.&lt;/p&gt;

&lt;p&gt;Building products from the inside-out can be a useful technique in situations where configuration doesn’t need to be immediate and user experience is not a major factor in doing business. It takes a little extra time for everyone to get things setup to reap the benefits from features built this way but can be a useful way to test the business impact of an idea before baking into our operations user interface.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Byte-Monkey: Bytecode-level fault injection for the JVM</title>
    <link rel="alternate" href="http://tech.unruly.co/blog/2016/05/30/bytecode-level-fault-injection-for-the-jvm.html"/>
    <id>http://tech.unruly.co/blog/2016/05/30/bytecode-level-fault-injection-for-the-jvm.html</id>
    <published>2016-05-30T12:00:00+00:00</published>
    <updated>2018-03-14T16:05:35+00:00</updated>
    <author>
      <name>Unruly</name>
    </author>
    <content type="html">&lt;p&gt;The software development community is full of memes.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;We replaced our monolith with micro services so that every outage could be more like a murder mystery.&lt;/p&gt;&amp;mdash; Honest Status Page (@honest_update) &lt;a href="https://twitter.com/honest_update/status/651897353889259520"&gt;October 7, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;No, not what you’d expect to find on the Reddit front-page, but instead “an idea, behavior, or style that spreads from person to person within a culture” (from &lt;a href="https://en.wikipedia.org/wiki/Meme"&gt;Wikipedia&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Well-known software development memes include “TDD is dead”, “Java is slow”, “What’s today’s new Javascript framework/build tool?”, "MongoDB is Snapchat for databases". This project and post grew from a meme I noticed on Twitter about microservices, the gist being “you can simulate microservices by adding latency to all your method calls”.&lt;/p&gt;

&lt;p&gt;Hmm. That’s actually an interesting idea. Let’s do it.&lt;/p&gt;

&lt;h2&gt;Introducing Byte-Monkey&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/mrwilson/byte-monkey"&gt;Byte-Monkey&lt;/a&gt; takes inspiration from Netflix’s chaos-monkeys, which have become synonymous with fault-tolerance experiments through controlled failure injection. It runs on the JVM, and twiddles the bytecode of your app to introduce the kind of failures you might encounter such as exceptions and latency.&lt;/p&gt;

&lt;h2&gt;Using with a JVM app&lt;/h2&gt;

&lt;p&gt;Byte-Monkey is loaded as a java agent during JVM startup.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -javaagent:byte-monkey.jar=mode:fault,rate:0.5,filter:org/eclipse/ -jar your-app.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above configuration would run it in Fault mode (throw exceptions) but only instrument classes in packages under &lt;code&gt;org/eclipse/&lt;/code&gt; and throw exceptions 50% of the time. More information about configuration options is on the GitHub Page&lt;/p&gt;

&lt;h2&gt;Why would I want to use this?&lt;/h2&gt;

&lt;p&gt;I've made a &lt;a href="http://probablyfine.co.uk/2015/05/07/ghosts-in-the-pipes/"&gt;couple&lt;/a&gt; of &lt;a href="http://probablyfine.co.uk/2015/04/09/injecting-application-failures-in-production/"&gt;posts&lt;/a&gt; previously about the utility of running controlled experiments to discover failure cases, at the application level or infrastructure level. Such drills give us the power and knowledge to answer questions about the behaviour of our multi-actor systems under different modes of failure.&lt;/p&gt;

&lt;p&gt;Byte-Monkey addresses the scenario where you want to test something inside your JVM app that may not be triggered by external factors. It lets you answer questions like "If our db connection driver started exhibiting faults every 1/10 operations, does the app release connections properly or does it cause issues?" or "What happens if our http client suddenly starts holding onto connections for an extra 100ms?"&lt;/p&gt;

&lt;p&gt;With Byte-Monkey, you can turn up the chance of failures occurring and see how your system behaves without having to make any adjustments to the application code itself.&lt;/p&gt;

&lt;h2&gt;Implementation&lt;/h2&gt;

&lt;p&gt;The detailed internals of how Byte-Monkey changes the application code are in the &lt;a href="https://github.com/mrwilson/byte-monkey"&gt;Github project README&lt;/a&gt; &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Working with parsed VAST documents</title>
    <link rel="alternate" href="http://tech.unruly.co/blog/2015/10/05/object-util.html"/>
    <id>http://tech.unruly.co/blog/2015/10/05/object-util.html</id>
    <published>2015-10-05T14:20:00+00:00</published>
    <updated>2018-03-14T16:05:35+00:00</updated>
    <author>
      <name>Unruly</name>
    </author>
    <content type="html">&lt;p&gt;Our &lt;a href="http://tech.unruly.co/vast-parser"&gt;vast-parser&lt;/a&gt; includes a JavaScript helper utility that aims to make working with parsed VAST documents easier. &lt;a href="http://www.iab.net/vast"&gt;VAST&lt;/a&gt; documents allow for many optional fields and so the output JSON objects may look very differently depending on the input. Imagine accessing the following nested property in some object:&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;let linearCreative = VAST.Ad.InLine.Creatives.Creative.Linear;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If any property before &lt;em&gt;Linear&lt;/em&gt; does not exist then this expression will throw a TypeError because the interpreter will try to read a property on something which is undefined.&lt;/p&gt;

&lt;p&gt;With the &lt;em&gt;objectUtil&lt;/em&gt; we can safely read any property using one of the util&amp;rsquo;s static methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;let val = objectUtil.getFromObjectPath(foo, &amp;#39;VAST.Ad.InLine.Creatives.Creative.Linear&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first argument &lt;em&gt;foo&lt;/em&gt; is an object storing the parsed VAST document and the second argument is &amp;ldquo;the lookup path&amp;rdquo; using the standard JSON/JavaScript access notation. This path will be recursively traversed from left to right, until either one of the properties is undefined in which case null is returned or the last property is found and its value is returned.&lt;/p&gt;

&lt;h2 id="the-39-interface-39"&gt;The &amp;lsquo;interface&amp;rsquo;&lt;/h2&gt;

&lt;pre&gt;&lt;code class="js"&gt;ObjectUtil.getFromObjectPath(object={}, path=&amp;#39;&amp;#39;, defaultValue=null);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reads from the &lt;em&gt;object&lt;/em&gt; using the given &lt;em&gt;path&lt;/em&gt; and returns the value of the property specified by the &lt;em&gt;path&lt;/em&gt; or if not found, returns the &lt;em&gt;defaultValue&lt;/em&gt; (null if not specified).&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;ObjectUtil.getIntegerFromObjectPath(object={}, path=&amp;#39;&amp;#39;, defaultValue=null);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Same as above but converts the found value to an integer.&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;ObjectUtil.getArrayFromObjectPath(object={}, path=&amp;#39;&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similar to the first method but sets the &lt;em&gt;defaultValue = [ ]&lt;/em&gt; and if the found value is not an array, it wraps it into an array before returning it.&lt;/p&gt;

&lt;h2 id="head-tail-traversal"&gt;Head, tail traversal&lt;/h2&gt;

&lt;p&gt;The lookup happens by splitting the path by the fullstop character and setting &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; variables to the first part of the path and the rest respectively.
In an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;obj={...}, path=&amp;#39;VAST.Ad.InLine.Creatives.Creative.Linear&amp;#39;

1. head=obj[&amp;#39;VAST&amp;#39;], tail=[&amp;#39;Ad&amp;#39;, &amp;#39;InLine&amp;#39;, &amp;#39;Creatives&amp;#39;, &amp;#39;Creative&amp;#39;, &amp;#39;Linear&amp;#39;]
2. head=head[&amp;#39;Ad&amp;#39;], tail=[&amp;#39;InLine&amp;#39;, &amp;#39;Creatives&amp;#39;, &amp;#39;Creative&amp;#39;, &amp;#39;Linear&amp;#39;]
3. head=head[&amp;#39;InLine&amp;#39;], tail=[&amp;#39;Creatives&amp;#39;, &amp;#39;Creative&amp;#39;, &amp;#39;Linear&amp;#39;]
4. head=head[&amp;#39;Creatives&amp;#39;], tail=[&amp;#39;Creative&amp;#39;, &amp;#39;Linear&amp;#39;]
5. head=head[&amp;#39;Creative&amp;#39;], tail=[&amp;#39;Linear&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In each step, &lt;code&gt;head&lt;/code&gt; is checked to be defined. If true, the code proceeds with updating &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; values as illustrated in the above example until the tail&amp;rsquo;s length is 1 when it returns &lt;code&gt;head[tail[0]]&lt;/code&gt;. If head is undefined at any point, the &lt;code&gt;defaultValue&lt;/code&gt; is returned.&lt;/p&gt;

&lt;h2 id="github-repository-and-documentation"&gt;GitHub repository and documentation&lt;/h2&gt;

&lt;p&gt;We have open sourced the vast-parser project &lt;a href="https://github.com/unruly/vast-parser"&gt;on Github&lt;/a&gt;. It currently supports VAST 3.0 specification.&lt;/p&gt;
</content>
  </entry>
</feed>
